I decided to use a dictionary to retrieve the cache data, so that the time complexity would remain
O(1) (using the key: value pairs to grab the value reduces the complexity). I also used a double
linked list, with nodes pointing both forward and backward, to enqueue and dequeue the nodes.
I also store the linked list's head and last nodes, for more simply accessing them.

Time complexity is O(1) because accessing values in a dict is O(1), as is getting the stored
values of the first and last elements in a linked list.
Setting the data is O(n) where n is the number of data points I want to set.
Getting the data is, again, O(1), using the dictionary.

The space complexity is O(n) for set, and O(1) for get.